https://hyperskill.org/projects/78?

THIS PROJECT IS MY FAVORITE PROJECT SINCE IT'S AN ADVANCED VERSION OF ROCK, PAPER, SCISSORS.
JUST LOOK AT THE LAST STAGE DESCRIPTION: https://hyperskill.org/projects/78/stages/435/preview

About:

In this project I coded a Rock-Paper-Scissors-Lizard-Spock game, a more advanced version of Rock-Paper-Scissors, which can be played against the computer.

STAGE 1:

Using conditional statements, I wrote a program that always defeats the human player in the Rock-Paper-Scissors game.

Topics Covered - Introduction to Python:

Overview of the basic program
Multi-line programs
PEP 8
Comments
Basic data types
Integer arithmetic
Variables
Naming variables
Taking input
Program with numbers
Boolean logic
Comparisons
If statement
Else statement
Elif statement

STAGE 2:

Let’s not mess with the player too much, though: from now on, we’re going to play fair. You’ll be able to do this with the help of the random module, while string formatting will assist you in announcing the end result of the game.

IDE
PyCharm basics
Quotes and multi-line strings
String formatting
List
Dictionary
Invoking a function
Load module
Random module

STAGE 3:
Can’t stop, won’t stop! A single game is never enough. Learn about loops in Python and apply them to make multiple game rounds possible.

Avoiding bad comments
While loop
For loop
Loop control statements

STAGE 4:
It’s time to find out who the best Rock-Paper-Scissors player is! You are going to need the basics of file handling to read the records of the results of previous games, as well as tally the user’s score in the current game.

Files
Intro to computational thinking
Components of computational thinking
Declaring a function
Arguments
Functional decomposition
Sep and end arguments of print
Files in Python
Reading files
Writing files
Flush and file arguments of print


STAGE 5:
Let's raise the stakes, shall we? In the final stage of the project, your program will let the player choose what options will be used in the game and how many of them will be there. This will require some more advanced knowledge about lists in Python.

Escape sequences
Indexes
Slicing
Operations with list
Basic string methods
Split and join
